package fr.cyberix.kolo.services;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 6/2/2018 3:00:50 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import android.os.AsyncTask;

import org.ksoap2.HeaderProperty;
import org.ksoap2.SoapEnvelope;
import org.ksoap2.SoapFault;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapSerializationEnvelope;
import org.ksoap2.transport.HttpTransportSE;

import java.util.List;

import fr.cyberix.kolo.ksoap2.IWsdl2CodeEvents;
import fr.cyberix.kolo.ksoap2.WS_Enums;
import fr.cyberix.kolo.model.entities.Customer;
import fr.cyberix.kolo.model.entities.LoginAttempt;
import fr.cyberix.kolo.model.entities.Registration;

public class KolOthenticor {

    public String NAMESPACE = "http://kolo.cyberix.fr/";
    public String url = "";
    public int timeOut = 180;
    public IWsdl2CodeEvents eventHandler;
    public WS_Enums.SoapProtocolVersion soapVersion;

    public KolOthenticor() {
    }

    public KolOthenticor(IWsdl2CodeEvents eventHandler) {
        this.eventHandler = eventHandler;
    }

    public KolOthenticor(IWsdl2CodeEvents eventHandler, String url) {
        this.eventHandler = eventHandler;
        this.url = url;
    }

    public KolOthenticor(IWsdl2CodeEvents eventHandler, String url, int timeOutInSeconds) {
        this.eventHandler = eventHandler;
        this.url = url;
        this.setTimeOut(timeOutInSeconds);
    }

    public void setTimeOut(int seconds) {
        this.timeOut = seconds * 1000;
    }

    public void setUrl(String url) {
        this.url = url;
    }

    public void DoRegistrationAsync(String jsonReg) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoRegistrationAsync(jsonReg, null);
    }

    public void DoRegistrationAsync(final String jsonReg, final List<HeaderProperty> headers) {

        new AsyncTask<Void, Void, Registration>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected Registration doInBackground(Void... params) {
                return DoRegistration(jsonReg, headers);
            }
            @Override
            protected void onPostExecute(Registration result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DoRegistration", result);
                }
            }
        }.execute();
    }

    public Registration DoRegistration(String jsonReg, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/", "DoRegistration");
        soapReq.addProperty("jsonReg", jsonReg);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://kolo.cyberix.fr/DoRegistration", soapEnvelope, headers);
            } else {
                httpTransport.call("http://kolo.cyberix.fr/DoRegistration", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    Registration resultVariable = new Registration(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public Registration DoRegistration(String jsonReg) {
        return DoRegistration(jsonReg, null);
    }

    public void DoConfirmRegistrationAsync(String jsonReg) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoConfirmRegistrationAsync(jsonReg, null);
    }

    public void DoConfirmRegistrationAsync(final String jsonReg, final List<HeaderProperty> headers) {

        new AsyncTask<Void, Void, Customer>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected Customer doInBackground(Void... params) {
                return DoConfirmRegistration(jsonReg, headers);
            }
            @Override
            protected void onPostExecute(Customer result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DoConfirmRegistration", result);
                }
            }
        }.execute();
    }

    public Customer DoConfirmRegistration(String jsonReg, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/", "DoConfirmRegistration");
        soapReq.addProperty("jsonReg", jsonReg);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://kolo.cyberix.fr/DoConfirmRegistration", soapEnvelope, headers);
            } else {
                httpTransport.call("http://kolo.cyberix.fr/DoConfirmRegistration", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    Customer resultVariable = new Customer(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public Customer DoConfirmRegistration(String jsonReg) {
        return DoConfirmRegistration(jsonReg, null);
    }

    public void DoLoginAsync(String jsonLogAttempt) throws Exception {
        if (this.eventHandler == null)
            throw new Exception("Async Methods Requires IWsdl2CodeEvents");
        DoLoginAsync(jsonLogAttempt, null);
    }

    public void DoLoginAsync(final String jsonLogAttempt, final List<HeaderProperty> headers) {

        new AsyncTask<Void, Void, LoginAttempt>() {
            @Override
            protected void onPreExecute() {
                eventHandler.Wsdl2CodeStartedRequest();
            }

            @Override
            protected LoginAttempt doInBackground(Void... params) {
                return DoLogin(jsonLogAttempt, headers);
            }
            @Override
            protected void onPostExecute(LoginAttempt result) {
                eventHandler.Wsdl2CodeEndedRequest();
                if (result != null) {
                    eventHandler.Wsdl2CodeFinished("DoLogin", result);
                }
            }
        }.execute();
    }

    public LoginAttempt DoLogin(String jsonLogAttempt, List<HeaderProperty> headers) {
        SoapSerializationEnvelope soapEnvelope = new SoapSerializationEnvelope(SoapEnvelope.VER11);
        soapEnvelope.implicitTypes = true;
        soapEnvelope.dotNet = true;
        SoapObject soapReq = new SoapObject("http://kolo.cyberix.fr/", "DoLogin");
        soapReq.addProperty("jsonLogAttempt", jsonLogAttempt);
        soapEnvelope.setOutputSoapObject(soapReq);
        HttpTransportSE httpTransport = new HttpTransportSE(url, timeOut);
        try {
            if (headers != null) {
                httpTransport.call("http://kolo.cyberix.fr/DoLogin", soapEnvelope, headers);
            } else {
                httpTransport.call("http://kolo.cyberix.fr/DoLogin", soapEnvelope);
            }
            Object retObj = soapEnvelope.bodyIn;
            if (retObj instanceof SoapFault) {
                SoapFault fault = (SoapFault) retObj;
                Exception ex = new Exception(fault.faultstring);
                if (eventHandler != null)
                    eventHandler.Wsdl2CodeFinishedWithException(ex);
            } else {
                SoapObject result = (SoapObject) retObj;
                if (result.getPropertyCount() > 0) {
                    Object obj = result.getProperty(0);
                    SoapObject j = (SoapObject) obj;
                    LoginAttempt resultVariable = new LoginAttempt(j);
                    return resultVariable;

                }
            }
        } catch (Exception e) {
            if (eventHandler != null)
                eventHandler.Wsdl2CodeFinishedWithException(e);
            e.printStackTrace();
        }
        return null;
    }

    public LoginAttempt DoLogin(String jsonLogAttempt) {
        return DoLogin(jsonLogAttempt, null);
    }

}
