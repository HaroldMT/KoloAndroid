package fr.cyberix.kolo.model.entities;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 6/1/2018 1:24:28 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class Bill implements KvmSerializable {

    public int idBill;
    public int idIssuingCustomer;
    public int idPayingCustomer;
    public String codeRefFactureType;
    public String codeRefBillStatus;
    public String dateIssued;
    public int totalBillAmount;
    public int leftToPay;
    public RefBillStatu refBillStatu;
    public RefBillType refBillType;
    public Customer customer;
    public Customer customer1;

    public Bill() {
    }

    public Bill(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("IdBill")) {
            Object obj = soapObject.getProperty("IdBill");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                idBill = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                idBill = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IdIssuingCustomer")) {
            Object obj = soapObject.getProperty("IdIssuingCustomer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                idIssuingCustomer = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                idIssuingCustomer = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("IdPayingCustomer")) {
            Object obj = soapObject.getProperty("IdPayingCustomer");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                idPayingCustomer = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                idPayingCustomer = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("CodeRefFactureType")) {
            Object obj = soapObject.getProperty("CodeRefFactureType");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                codeRefFactureType = j.toString();
            } else if (obj != null && obj instanceof String) {
                codeRefFactureType = (String) obj;
            }
        }
        if (soapObject.hasProperty("CodeRefBillStatus")) {
            Object obj = soapObject.getProperty("CodeRefBillStatus");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                codeRefBillStatus = j.toString();
            } else if (obj != null && obj instanceof String) {
                codeRefBillStatus = (String) obj;
            }
        }
        if (soapObject.hasProperty("DateIssued")) {
            Object obj = soapObject.getProperty("DateIssued");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                dateIssued = j.toString();
            } else if (obj != null && obj instanceof String) {
                dateIssued = (String) obj;
            }
        }
        if (soapObject.hasProperty("TotalBillAmount")) {
            Object obj = soapObject.getProperty("TotalBillAmount");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                totalBillAmount = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                totalBillAmount = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("LeftToPay")) {
            Object obj = soapObject.getProperty("LeftToPay");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                leftToPay = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                leftToPay = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("RefBillStatu")) {
            SoapObject j = (SoapObject) soapObject.getProperty("RefBillStatu");
            refBillStatu = new RefBillStatu(j);

        }
        if (soapObject.hasProperty("RefBillType")) {
            SoapObject j = (SoapObject) soapObject.getProperty("RefBillType");
            refBillType = new RefBillType(j);

        }
        if (soapObject.hasProperty("Customer")) {
            SoapObject j = (SoapObject) soapObject.getProperty("Customer");
            customer = new Customer(j);

        }
        if (soapObject.hasProperty("Customer1")) {
            SoapObject j = (SoapObject) soapObject.getProperty("Customer1");
            customer1 = new Customer(j);

        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return idBill;
            case 1:
                return idIssuingCustomer;
            case 2:
                return idPayingCustomer;
            case 3:
                return codeRefFactureType;
            case 4:
                return codeRefBillStatus;
            case 5:
                return dateIssued;
            case 6:
                return totalBillAmount;
            case 7:
                return leftToPay;
            case 8:
                return refBillStatu;
            case 9:
                return refBillType;
            case 10:
                return customer;
            case 11:
                return customer1;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 12;
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IdBill";
                break;
            case 1:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IdIssuingCustomer";
                break;
            case 2:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IdPayingCustomer";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CodeRefFactureType";
                break;
            case 4:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "CodeRefBillStatus";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "DateIssued";
                break;
            case 6:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "TotalBillAmount";
                break;
            case 7:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "LeftToPay";
                break;
            case 8:
                info.type = RefBillStatu.class;
                info.name = "RefBillStatu";
                break;
            case 9:
                info.type = RefBillType.class;
                info.name = "RefBillType";
                break;
            case 10:
                info.type = Customer.class;
                info.name = "Customer";
                break;
            case 11:
                info.type = Customer.class;
                info.name = "Customer1";
                break;
        }
    }

    //    @Override
    public String getInnerText() {
        return null;
    }

    //    @Override
    public void setInnerText(String s) {
    }

}
