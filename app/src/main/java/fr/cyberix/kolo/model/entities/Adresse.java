package fr.cyberix.kolo.model.entities;

//------------------------------------------------------------------------------
// <wsdl2code-generated>
//    This code was generated by http://www.wsdl2code.com version  2.6
//
// Date Of Creation: 6/1/2018 1:24:28 PM
//    Please dont change this code, regeneration will override your changes
//</wsdl2code-generated>
//
//------------------------------------------------------------------------------
//
//This source code was auto-generated by Wsdl2Code  Version
//

import org.ksoap2.serialization.KvmSerializable;
import org.ksoap2.serialization.PropertyInfo;
import org.ksoap2.serialization.SoapObject;
import org.ksoap2.serialization.SoapPrimitive;

import java.util.Hashtable;

public class Adresse implements KvmSerializable {

    public int idAddress;
    public String line_1;
    public String line_2;
    public String line_3;
    public int idCity;
    public String postCode;
    public String addressTypeCode;
    public City city;
    public RefAddressType refAddressType;

    public Adresse() {
    }

    public Adresse(SoapObject soapObject) {
        if (soapObject == null)
            return;
        if (soapObject.hasProperty("IdAddress")) {
            Object obj = soapObject.getProperty("IdAddress");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                idAddress = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                idAddress = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("Line_1")) {
            Object obj = soapObject.getProperty("Line_1");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                line_1 = j.toString();
            } else if (obj != null && obj instanceof String) {
                line_1 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Line_2")) {
            Object obj = soapObject.getProperty("Line_2");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                line_2 = j.toString();
            } else if (obj != null && obj instanceof String) {
                line_2 = (String) obj;
            }
        }
        if (soapObject.hasProperty("Line_3")) {
            Object obj = soapObject.getProperty("Line_3");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                line_3 = j.toString();
            } else if (obj != null && obj instanceof String) {
                line_3 = (String) obj;
            }
        }
        if (soapObject.hasProperty("IdCity")) {
            Object obj = soapObject.getProperty("IdCity");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                idCity = Integer.parseInt(j.toString());
            } else if (obj != null && obj instanceof Number) {
                idCity = (Integer) obj;
            }
        }
        if (soapObject.hasProperty("PostCode")) {
            Object obj = soapObject.getProperty("PostCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                postCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                postCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("AddressTypeCode")) {
            Object obj = soapObject.getProperty("AddressTypeCode");
            if (obj != null && obj.getClass().equals(SoapPrimitive.class)) {
                SoapPrimitive j = (SoapPrimitive) obj;
                addressTypeCode = j.toString();
            } else if (obj != null && obj instanceof String) {
                addressTypeCode = (String) obj;
            }
        }
        if (soapObject.hasProperty("City")) {
            SoapObject j = (SoapObject) soapObject.getProperty("City");
            city = new City(j);

        }
        if (soapObject.hasProperty("RefAddressType")) {
            SoapObject j = (SoapObject) soapObject.getProperty("RefAddressType");
            refAddressType = new RefAddressType(j);

        }
    }

    @Override
    public Object getProperty(int arg0) {
        switch (arg0) {
            case 0:
                return idAddress;
            case 1:
                return line_1;
            case 2:
                return line_2;
            case 3:
                return line_3;
            case 4:
                return idCity;
            case 5:
                return postCode;
            case 6:
                return addressTypeCode;
            case 7:
                return city;
            case 8:
                return refAddressType;
        }
        return null;
    }

    @Override
    public int getPropertyCount() {
        return 9;
    }

    @Override
    public void setProperty(int arg0, Object arg1) {
    }

    @Override
    public void getPropertyInfo(int index, @SuppressWarnings("rawtypes") Hashtable arg1, PropertyInfo info) {
        switch (index) {
            case 0:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IdAddress";
                break;
            case 1:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Line_1";
                break;
            case 2:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Line_2";
                break;
            case 3:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "Line_3";
                break;
            case 4:
                info.type = PropertyInfo.INTEGER_CLASS;
                info.name = "IdCity";
                break;
            case 5:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "PostCode";
                break;
            case 6:
                info.type = PropertyInfo.STRING_CLASS;
                info.name = "AddressTypeCode";
                break;
            case 7:
                info.type = City.class;
                info.name = "City";
                break;
            case 8:
                info.type = RefAddressType.class;
                info.name = "RefAddressType";
                break;
        }
    }

    //    @Override
    public String getInnerText() {
        return null;
    }

    //    @Override
    public void setInnerText(String s) {
    }

}
